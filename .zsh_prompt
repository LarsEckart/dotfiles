#!/usr/bin/env zsh

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas's prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

# Set proper terminal type for color support, but preserve existing TERM if it's already good
if [[ -z "$TERM" || "$TERM" == "dumb" ]]; then
	if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
		export TERM='gnome-256color';
	elif infocmp xterm-256color >/dev/null 2>&1; then
		export TERM='xterm-256color';
	fi;
elif [[ "$TERM" != *"256color"* ]] && infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

# Enable colors and git support
autoload -Uz colors && colors
autoload -Uz vcs_info

# Configure vcs_info for git without colors
zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:git:*' formats ' on %b%u%c'
zstyle ':vcs_info:git:*' actionformats ' on %b%u%c (%a)'
zstyle ':vcs_info:git:*' check-for-changes true
zstyle ':vcs_info:git:*' stagedstr '+'
zstyle ':vcs_info:git:*' unstagedstr '!'

# Custom git status function for additional info
prompt_git_status() {
	local s='';
	
	# Check if the current directory is in a Git repository.
	if git rev-parse --is-inside-work-tree &>/dev/null; then
		# check if the current directory is in .git before running git checks
		if [[ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]]; then
			# Check for untracked files.
			if [[ -n "$(git ls-files --others --exclude-standard)" ]]; then
				s+='?';
			fi;

			# Check for stashed files.
			if git rev-parse --verify refs/stash &>/dev/null; then
				s+='$';
			fi;
		fi;
		
		[[ -n "${s}" ]] && echo " [${s}]";
	fi;
}

# Precmd function to update vcs_info
precmd() {
	vcs_info
}

# Set terminal title
precmd_functions+=(precmd)
preexec() {
	print -Pn "\e]0;%~\a"
}

# No colors to avoid interference with tools like Claude Code

# Set the terminal title and prompt.
setopt PROMPT_SUBST
PROMPT='
%n at %m in %~${vcs_info_msg_0_}$(prompt_git_status)
$ '

PS2="→ "

# from https://spin.atomicobject.com/2016/05/28/log-bash-history/
# Only enable history logging in non-interactive shells to avoid interfering with tools like Claude Code
if [[ ! -o interactive ]] && [[ -z "$CLAUDE_CODE" ]] && [[ -z "$VSCODE_INJECTION" ]]; then
	# Zsh equivalent of bash PROMPT_COMMAND
	precmd_functions+=(log_command_history)
	
	log_command_history() {
		if [[ "$(id -u)" -ne 0 ]]; then
			echo "$(date "+%Y-%m-%d.%H:%M:%S") $(pwd) $(fc -ln -1)" >> ~/.dotfiles/logs/zsh-history-$(date "+%Y-%m-%d").log
		fi
	}
fi