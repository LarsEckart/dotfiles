#!/usr/bin/env zsh

# -d for recursive removing untracked files -f force, delete directories
red() {
	git reset --hard HEAD
	git clean -df
}

# "check out a given PR for review"
revpr() {
  gh co $1
  git reset --mixed master
}

search() {
	if [[ "$#" -ne 1 ]]; then
        echo "Error: Please provide exactly one argument enclosed in quotes."
        return 1
    fi

	local pattern="$1"
    grep -Rnw . -e "$pattern"
}

jd() {
	open "https://docs.oracle.com/en/java/javase/21/docs/api/search.html?q=$*"
}

ups() {
	git remote add upstream $@
	git fetch upstream
	git pull upstream/main
	git push
}

pk() {
	lsof -i :"$1" -s TCP:LISTEN -t | xargs kill
}

# curl every second with timeout for downtime checks during deploy
down() {
	while true ; do time curl --connect-timeout 1 https://micronaut.herokuapp.com/health ; sleep 1 ; done
}

# Create a new directory and enter it
mkd() {
	mkdir -p "$@" && cd "$_";
}

# 5 most used commands
top5() {
	fc -l 1 | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n5
}

#  git log is the git command to get logs data
#        --format=format: to remove all fancy formatting
#        --name-only because we only care about file names
#        --since=12.month is quite explicit
#    egrep -v '^$' removes all empty lines from the output
#    sort to sort file names alphabetically
#    uniq -c to count individual file names occurrences
#    sort -r to sort the result in descending order
#    head -50 to keep the 50 most changed files only
churn() {
	git log --format=format: --name-only --since=12.month \
 | egrep -v '^$' \
 | sort \
 | uniq -c \
 | sort -r \
 | head -50
}

# git-churn --since='3 months ago' <core_of_the_app> | tail -10
git-churn() {
	git log --all -M -C --name-only --format='format:' "$@" \
  | sort \
  | grep -v '^$' \
  | uniq -c \
  | sort -n \
  | awk 'BEGIN {print "count\tfile"} {print $1 "\t" $2}'
}

godClasses() {
    find . -name "*.java" | xargs wc -l | sort -rn | head
}

# Change working directory to the top-most Finder window location
cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	local size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`â€¦";
	"${cmd}" -v "${tmpFile}" || return 1;
	[[ -f "${tmpFile}" ]] && rm "${tmpFile}";

	local zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Extract most know archives with one command
extract () {
    if [[ -f $1 ]] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

# Determine size of a file or total size of a directory
fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git's colored diff when available
if hash git &>/dev/null; then
	diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Compare original and gzipped file size
gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# UTF-8-encode a string of Unicode symbols
escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
	# print a newline unless we're piping the output to another program
	if [[ -t 1 ]]; then
		echo ""; # newline
	fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
getcertnames() {
	if [[ -z "${1}" ]]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}â€¦";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
v() {
	if [[ $# -eq 0 ]]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
o() {
	if [[ $# -eq 0 ]]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# docker functions
dcleanup(){
	local containers
	containers=($(docker ps -aq 2>/dev/null))
	[[ ${#containers[@]} -gt 0 ]] && docker rm "${containers[@]}" 2>/dev/null
	local volumes
	volumes=($(docker ps --filter status=exited -q 2>/dev/null))
	[[ ${#volumes[@]} -gt 0 ]] && docker rm -v "${volumes[@]}" 2>/dev/null
	local images
	images=($(docker images --filter dangling=true -q 2>/dev/null))
	[[ ${#images[@]} -gt 0 ]] && docker rmi "${images[@]}" 2>/dev/null
}

rename_last_commit(){
	git commit --amend -m "$1"
}

howManyJava(){
	gw -q javaToolChains
}

# https://sqlformat.org/api/
sqlformat(){
	curl -s --location --request POST 'https://sqlformat.org/api/v1/format' \
	--header 'Content-Type: application/x-www-form-urlencoded' \
	--data-urlencode 'reindent=1' \
	--data-urlencode 'indent_width=3' \
	--data-urlencode 'keyword_case=upper' \
	--data-urlencode 'strip_comments=1' \
	--data-urlencode "sql=$1" | jq -r '.result'
}

#
# The bumbailiff allows the team to take up a small amount of technical debt
# (TODOs in the code) for a limited period. After that period the script fails.
#
# It will find // TODO in .js or .jsx files, and # TODO in .feature files.
#
# For example, if the allowed period for all the TODOs is 14 days.
#   * It's OK to have 1 TODO that is 13 days old
#   * It's OK to have 3 TODOs that are 4 days old
#   * It's NOT OK to have 3 TODOs that are 5 days old
#   * It's NOT OK to have 1 TODO that is 14 days old
#
# Originally written by @aslakhellesoy and extended by the Cucumber Pro team
#
todo (){
	if [[ -n "$BUMBAILIFF_IGNORE_LA_LA_LA" ]] ; then exit 0 ; fi
setopt LOCAL_OPTIONS BASH_REMATCH

RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m'
LIGHT_GRAY='\033[0;37m'

MAX_AGE=150
OK_AGE=$(($MAX_AGE / 2))

todos=$( (git grep --files-with-matches "\(\/\/\|\#\)\s*TODO" -- "*.java" "*.jsx" "*.feature" || echo "") | xargs -I % sh -c 'echo %; git blame --date=raw % | grep "\(\/\/\|\#\)\s*TODO"')
now_seconds_since_epoch=$(date +%s)
total_days=0
while IFS= read -r line; do
  if [[ "${line}" =~ ([0-9]{10}) ]]; then
    commit_seconds_since_epoch=${match[1]}
    days_old=$(( (${now_seconds_since_epoch} - ${commit_seconds_since_epoch}) / 86400 ))
    total_days=$((${total_days} + ${days_old}))

    location="${line%// TODO*}"
    location="${location%%*( )}"
    todo="${line##*// }"

    if ((${days_old}<=${OK_AGE}))
    then
      color="${GREEN}"
    elif ((${days_old}<=${MAX_AGE}))
    then
      color="${ORANGE}"
    else
      color="${RED}"
    fi
    print -P "${color}${days_old} days old${LIGHT_GRAY} ${location}${NC}\n${todo}\n"
  else
    print -P "${BOLD}${line}${NC}"
  fi
done <<< "${todos}"

status=0
if ((${total_days}<=${OK_AGE}))
then
  color="${GREEN}"
elif ((${total_days}<=${MAX_AGE}))
then
  color="${ORANGE}"
else
  color="${RED}"
  status=1
fi

print -P "ðŸ’µ  ${color}${total_days} TODO-days accumulated. Max allowance is ${MAX_AGE}${NC}"
# exit ${status}
}

# Create a Procfile and copy shoreman.sh for process management
proc() {
    # Copy template files
    cp ~/.dotfiles/templates/proc/Procfile.template ./Procfile
    cp ~/.dotfiles/templates/proc/.env.template ./.env
    cp ~/.dotfiles/templates/proc/Makefile.template ./Makefile

    # Copy shoreman.sh from scripts directory
    cp ~/.dotfiles/scripts/shoreman.sh .

    echo "Created Procfile, .env, Makefile, and copied shoreman.sh"
    echo "Run 'make dev' to start services, 'make stop' to stop, 'make logs' to view logs"
}

# Create GitHub issues using Claude Code
# Usage: issue implement hello world in go
issue () {
  ccd "/issue $*"
}

google(){
  gemini -p "Use google_web_search, search for <query>$1</query> and summarize  results"
}

# Text-to-speech using ElevenLabs
speak() {
  if [ $# -eq 0 ]; then
    echo "Usage: speak \"your message here\""
    return 1
  fi
  cd ~/.dotfiles/speech && uv run text_to_speech_eleven_labs.py "$1"
}

# Show what's using a port (defaults to 8080)
wtf() {
  local port="${1:-8080}"
  lsof -i "tcp:$port"
}
